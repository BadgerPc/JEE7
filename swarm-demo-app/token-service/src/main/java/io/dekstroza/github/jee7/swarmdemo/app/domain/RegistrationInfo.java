/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.dekstroza.github.jee7.swarmdemo.app.domain;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RegistrationInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8613934470435036973L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RegistrationInfo\",\"namespace\":\"io.dekstroza.github.jee7.swarmdemo.app.domain\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"userId\",\"type\":\"int\",\"default\":0},{\"name\":\"email\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"password\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"authToken\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"creationDate\",\"type\":\"long\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public int userId;
  @Deprecated public java.lang.CharSequence email;
  @Deprecated public java.lang.CharSequence password;
  @Deprecated public java.lang.CharSequence authToken;
  @Deprecated public long creationDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RegistrationInfo() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param userId The new value for userId
   * @param email The new value for email
   * @param password The new value for password
   * @param authToken The new value for authToken
   * @param creationDate The new value for creationDate
   */
  public RegistrationInfo(java.lang.CharSequence id, java.lang.Integer userId, java.lang.CharSequence email, java.lang.CharSequence password, java.lang.CharSequence authToken, java.lang.Long creationDate) {
    this.id = id;
    this.userId = userId;
    this.email = email;
    this.password = password;
    this.authToken = authToken;
    this.creationDate = creationDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return userId;
    case 2: return email;
    case 3: return password;
    case 4: return authToken;
    case 5: return creationDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: userId = (java.lang.Integer)value$; break;
    case 2: email = (java.lang.CharSequence)value$; break;
    case 3: password = (java.lang.CharSequence)value$; break;
    case 4: authToken = (java.lang.CharSequence)value$; break;
    case 5: creationDate = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.Integer getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.Integer value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'password' field.
   * @return The value of the 'password' field.
   */
  public java.lang.CharSequence getPassword() {
    return password;
  }

  /**
   * Sets the value of the 'password' field.
   * @param value the value to set.
   */
  public void setPassword(java.lang.CharSequence value) {
    this.password = value;
  }

  /**
   * Gets the value of the 'authToken' field.
   * @return The value of the 'authToken' field.
   */
  public java.lang.CharSequence getAuthToken() {
    return authToken;
  }

  /**
   * Sets the value of the 'authToken' field.
   * @param value the value to set.
   */
  public void setAuthToken(java.lang.CharSequence value) {
    this.authToken = value;
  }

  /**
   * Gets the value of the 'creationDate' field.
   * @return The value of the 'creationDate' field.
   */
  public java.lang.Long getCreationDate() {
    return creationDate;
  }

  /**
   * Sets the value of the 'creationDate' field.
   * @param value the value to set.
   */
  public void setCreationDate(java.lang.Long value) {
    this.creationDate = value;
  }

  /**
   * Creates a new RegistrationInfo RecordBuilder.
   * @return A new RegistrationInfo RecordBuilder
   */
  public static io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder newBuilder() {
    return new io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder();
  }

  /**
   * Creates a new RegistrationInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RegistrationInfo RecordBuilder
   */
  public static io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder newBuilder(io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder other) {
    return new io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder(other);
  }

  /**
   * Creates a new RegistrationInfo RecordBuilder by copying an existing RegistrationInfo instance.
   * @param other The existing instance to copy.
   * @return A new RegistrationInfo RecordBuilder
   */
  public static io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder newBuilder(io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo other) {
    return new io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder(other);
  }

  /**
   * RecordBuilder for RegistrationInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RegistrationInfo>
    implements org.apache.avro.data.RecordBuilder<RegistrationInfo> {

    private java.lang.CharSequence id;
    private int userId;
    private java.lang.CharSequence email;
    private java.lang.CharSequence password;
    private java.lang.CharSequence authToken;
    private long creationDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.password)) {
        this.password = data().deepCopy(fields()[3].schema(), other.password);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.authToken)) {
        this.authToken = data().deepCopy(fields()[4].schema(), other.authToken);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.creationDate)) {
        this.creationDate = data().deepCopy(fields()[5].schema(), other.creationDate);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RegistrationInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.password)) {
        this.password = data().deepCopy(fields()[3].schema(), other.password);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.authToken)) {
        this.authToken = data().deepCopy(fields()[4].schema(), other.authToken);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.creationDate)) {
        this.creationDate = data().deepCopy(fields()[5].schema(), other.creationDate);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.Integer getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder setUserId(int value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder clearUserId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'password' field.
      * @return The value.
      */
    public java.lang.CharSequence getPassword() {
      return password;
    }

    /**
      * Sets the value of the 'password' field.
      * @param value The value of 'password'.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder setPassword(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.password = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'password' field has been set.
      * @return True if the 'password' field has been set, false otherwise.
      */
    public boolean hasPassword() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'password' field.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder clearPassword() {
      password = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'authToken' field.
      * @return The value.
      */
    public java.lang.CharSequence getAuthToken() {
      return authToken;
    }

    /**
      * Sets the value of the 'authToken' field.
      * @param value The value of 'authToken'.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder setAuthToken(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.authToken = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'authToken' field has been set.
      * @return True if the 'authToken' field has been set, false otherwise.
      */
    public boolean hasAuthToken() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'authToken' field.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder clearAuthToken() {
      authToken = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationDate' field.
      * @return The value.
      */
    public java.lang.Long getCreationDate() {
      return creationDate;
    }

    /**
      * Sets the value of the 'creationDate' field.
      * @param value The value of 'creationDate'.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder setCreationDate(long value) {
      validate(fields()[5], value);
      this.creationDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'creationDate' field has been set.
      * @return True if the 'creationDate' field has been set, false otherwise.
      */
    public boolean hasCreationDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'creationDate' field.
      * @return This builder.
      */
    public io.dekstroza.github.jee7.swarmdemo.app.domain.RegistrationInfo.Builder clearCreationDate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public RegistrationInfo build() {
      try {
        RegistrationInfo record = new RegistrationInfo();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.Integer) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.password = fieldSetFlags()[3] ? this.password : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.authToken = fieldSetFlags()[4] ? this.authToken : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.creationDate = fieldSetFlags()[5] ? this.creationDate : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
